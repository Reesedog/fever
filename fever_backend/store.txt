
        
        # 发送消息到 WebSocket 群组
        self.send_message_to_ws_group('memo_memo_room', message)
        print("Message sent to WebSocket group")
        
        client = OpenAI(api_key=openai_api_key)
 
        # 创建助手
        assistant = client.beta.assistants.create(
            instructions="You are an assistant that helps forming NDIS support plans. "
            "User will give you information about their disability. "
            "Then you should gather the related item and budget amount ($) and provide a formated support plan. "
            "The format should include support item and its budget amount. provide no more than 5 items."
            "Be clear about the item and its associated budget amount. "
            "Markdown format is strictly forbidden!!!!!"
            "////I repeat: Markdown format is strictly forbidden!!!!!////"
            "do not use markdown format such as **, ##, etc.",
            model="gpt-4o",
            tools=[{"type": "file_search"}],
        )
        
        assistant = client.beta.assistants.update(
            assistant_id=assistant.id,
            tool_resources={"file_search": {"vector_store_ids": ["vs_5iwLviwEL7Fjbtnzqwa8Ali2"]}},
        )
        
        # 创建会话
        
        # 发送消息到会话
        message = client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=f"Content: {content}\n"
        )
        
        event_handler = EventHandler()

        # 发送请求到 OpenAI API
        try:
            with client.beta.threads.runs.stream(
            thread_id=thread.id,
            assistant_id=assistant.id,
            event_handler=event_handler,
            ) as stream:
                stream.until_done()

            print("\n\nRun completed")

        except Exception as e:
            print(f"Error: {e}")
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        openai_response = event_handler.get_full_message()
        pattern = r'【[^】]*】'
        counter = [0]

        def replace_function(match):
            index = counter[0]
            counter[0] += 1
            return f'[{index}]'

        openai_response = re.sub(pattern, replace_function, openai_response)
        memo.openai_response = openai_response



        thread_LX7bxEAfr8t8Vas8OLKxOzzl